[
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "RLEACCEL",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "RLEACCEL",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "QUIT",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "character,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "character.",
        "description": "character.",
        "detail": "character.",
        "documentation": {}
    },
    {
        "label": "Stickman",
        "kind": 6,
        "importPath": "character",
        "description": "character",
        "peekOfCode": "class Stickman(pygame.sprite.Sprite):\n    def __init__(self, id, x, y,keys, gravity=2, friction=0.12):\n        super(Stickman, self).__init__()\n        self.id = id\n        self.lives = 3\n        self.keys = keys\n        img = pygame.image.load(\"assets/p1standstill.gif\")\n        self.image = pygame.transform.scale(img, (40, 80))\n        self.rect = self.image.get_rect()\n        self.rect.x = x",
        "detail": "character",
        "documentation": {}
    },
    {
        "label": "vec",
        "kind": 5,
        "importPath": "character",
        "description": "character",
        "peekOfCode": "vec = pygame.math.Vector2\ndef __init__(inWIDTH, inHEIGHT, inscreen,game):\n    global WIDTH, HEIGHT, SCREEN,GAME\n    WIDTH = inWIDTH\n    HEIGHT = inHEIGHT\n    SCREEN = inscreen\n    GAME = game\nclass Stickman(pygame.sprite.Sprite):\n    def __init__(self, id, x, y,keys, gravity=2, friction=0.12):\n        super(Stickman, self).__init__()",
        "detail": "character",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "enemy",
        "description": "enemy",
        "peekOfCode": "class Enemy(pygame.sprite.Sprite):\n    def __init__(\n        self,\n        id,\n        x,\n        y,\n    ):\n        super(Enemy, self).__init__()\n        self.image = pygame.image.load(\"assets/enemy1standstill.gif\").convert()\n        self.image.set_colorkey((255, 255, 255), RLEACCEL)",
        "detail": "enemy",
        "documentation": {}
    },
    {
        "label": "Door",
        "kind": 6,
        "importPath": "level",
        "description": "level",
        "peekOfCode": "class Door(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        super(Door, self).__init__()\n        self.x = x\n        self.y = y\n        self.surf = pygame.image.load(\"30x10greyplatform.gif\").convert()\n        self.surf.set_colorkey((255, 255, 255), RLEACCEL)\n        self.rect = self.surf.get_rect(\n            center=(\n                random.randint(WIDTH + 20, WIDTH + 100),",
        "detail": "level",
        "documentation": {}
    },
    {
        "label": "Platform",
        "kind": 6,
        "importPath": "level",
        "description": "level",
        "peekOfCode": "class Platform(pygame.sprite.Sprite):\n    def __init__(self, x, y, id, sizex=30, sizey=10):\n        super(Platform, self).__init__()\n        self.x = x\n        self.y = y\n        self.width = sizex\n        self.height = sizey\n        self.id = id\n        self.surf = pygame.image.load(\"assets/30x10greyplatform.gif\").convert()\n        self.surf.set_colorkey((255, 255, 255), RLEACCEL)",
        "detail": "level",
        "documentation": {}
    },
    {
        "label": "TeamPlatform",
        "kind": 6,
        "importPath": "level",
        "description": "level",
        "peekOfCode": "class TeamPlatform(Platform):\n    def __init__(self, team):\n        super(TeamPlatform, self).__init__()\n        self.team = team\n    def land(self, player):\n        super(TeamPlatform, self).land()\n        if player.team != self.team:\n            player.kill()",
        "detail": "level",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Game():\n    def main(self):\n        self.running = True\n        self.enemies = []\n        self.keys = pygame.key.get_pressed()\n        self.player1 = character.Stickman(0, 50, 200,self.keys)\n        self.player2 = character.Stickman(1, 100, 200,self.keys)\n        # Spawn positions for players 1 and 2\n        for x in range(0, 7):\n            self.enemies.append(enemy.Enemy(x, 100 * x, 200))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "game = Game()\n# Font used to display the score and other information\nfont = pygame.font.Font(\"freesansbold.ttf\", 40)\n# Creating and setting screen width and height, display caption\nWIDTH, HEIGHT = 1600, 900\nscreen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE)\nsurf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\ncharacter.__init__(WIDTH, HEIGHT, screen,game)\nenemy.__init__(screen, WIDTH, HEIGHT)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "font = pygame.font.Font(\"freesansbold.ttf\", 40)\n# Creating and setting screen width and height, display caption\nWIDTH, HEIGHT = 1600, 900\nscreen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE)\nsurf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\ncharacter.__init__(WIDTH, HEIGHT, screen,game)\nenemy.__init__(screen, WIDTH, HEIGHT)\nlevel.__init__(WIDTH, HEIGHT, screen)\n# Setting the clock object and fps",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE)\nsurf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\ncharacter.__init__(WIDTH, HEIGHT, screen,game)\nenemy.__init__(screen, WIDTH, HEIGHT)\nlevel.__init__(WIDTH, HEIGHT, screen)\n# Setting the clock object and fps\nclock = pygame.time.Clock()\nFPS = 60\nif __name__ == \"__main__\":",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "surf",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "surf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\ncharacter.__init__(WIDTH, HEIGHT, screen,game)\nenemy.__init__(screen, WIDTH, HEIGHT)\nlevel.__init__(WIDTH, HEIGHT, screen)\n# Setting the clock object and fps\nclock = pygame.time.Clock()\nFPS = 60\nif __name__ == \"__main__\":\n    game.main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "clock = pygame.time.Clock()\nFPS = 60\nif __name__ == \"__main__\":\n    game.main()\n    pygame.quit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FPS = 60\nif __name__ == \"__main__\":\n    game.main()\n    pygame.quit()",
        "detail": "main",
        "documentation": {}
    }
]