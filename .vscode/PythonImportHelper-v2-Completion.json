[
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "RLEACCEL",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "RLEACCEL",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "QUIT",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "enemy,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enemy.",
        "description": "enemy.",
        "detail": "enemy.",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Stickman",
        "kind": 6,
        "importPath": "character",
        "description": "character",
        "peekOfCode": "class Stickman(pygame.sprite.Sprite):\n    def __init__(self, id, x, y,keys, gravity=2, friction=0.12):\n        super(Stickman, self).__init__()\n        self.id = id\n        self.lives = 3\n        self.keys = keys\n        img = pygame.image.load(\"assets/p1standstill.gif\")\n        self.image = pygame.transform.scale(img, (40, 80))\n        self.rect = self.image.get_rect()\n        self.rect.x = x",
        "detail": "character",
        "documentation": {}
    },
    {
        "label": "vec",
        "kind": 5,
        "importPath": "character",
        "description": "character",
        "peekOfCode": "vec = pygame.math.Vector2\ndef __init__(inWIDTH, inHEIGHT, inscreen,game):\n    global WIDTH, HEIGHT, screen,GAME\n    WIDTH = inWIDTH\n    HEIGHT = inHEIGHT\n    screen = inscreen\n    GAME = game\nclass Stickman(pygame.sprite.Sprite):\n    def __init__(self, id, x, y,keys, gravity=2, friction=0.12):\n        super(Stickman, self).__init__()",
        "detail": "character",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "enemy",
        "description": "enemy",
        "peekOfCode": "class Enemy(pygame.sprite.Sprite):\n    def __init__(\n        self,\n        id,\n        x,\n        y,\n    ):\n        super(Enemy, self).__init__()\n        self.image = pygame.image.load(\"assets/enemy1standstill.gif\").convert()\n        self.image.set_colorkey((255, 255, 255), RLEACCEL)",
        "detail": "enemy",
        "documentation": {}
    },
    {
        "label": "Door",
        "kind": 6,
        "importPath": "level",
        "description": "level",
        "peekOfCode": "class Door(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        super(Door, self).__init__()\n        self.x = x\n        self.y = y\n        self.surf = pygame.image.load(\"30x10greyplatform.gif\").convert()\n        self.surf.set_colorkey((255, 255, 255), RLEACCEL)\n        self.rect = self.surf.get_rect(\n            center=(\n                random.randint(WIDTH + 20, WIDTH + 100),",
        "detail": "level",
        "documentation": {}
    },
    {
        "label": "Platform",
        "kind": 6,
        "importPath": "level",
        "description": "level",
        "peekOfCode": "class Platform(pygame.sprite.Sprite):\n    def __init__(self, x, y, id, sizex=30, sizey=10):\n        super(Platform, self).__init__()\n        self.x = x\n        self.y = y\n        self.width = sizex\n        self.height = sizey\n        self.id = id\n        self.surf = pygame.image.load(\"assets/30x10greyplatform.gif\").convert()\n        self.surf.set_colorkey((255, 255, 255), RLEACCEL)",
        "detail": "level",
        "documentation": {}
    },
    {
        "label": "TeamPlatform",
        "kind": 6,
        "importPath": "level",
        "description": "level",
        "peekOfCode": "class TeamPlatform(Platform):\n    def __init__(self, team):\n        super(TeamPlatform, self).__init__()\n        self.team = team\n    def land(self, player):\n        super(TeamPlatform, self).land()\n        if player.team != self.team:\n            player.kill()",
        "detail": "level",
        "documentation": {}
    },
    {
        "label": "Stickman",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Stickman():\n    def __init__(self,index, x, y):\n        self.index = index\n        self.reset(x, y)\n    def update(self, game_over):\n        dx = 0\n        dy = 0\n        walk_cooldown = 2\n        if game_over == 0:\n            #get keypresses",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Game():\n    def main(self):\n        global clock,FPS\n        self.running = True\n        self.enemies = []\n        self.keys = pygame.key.get_pressed()\n        self.player1 = Stickman(0, 50, 200)\n        self.player2 = Stickman(1, 100, 200)\n        # Spawn positions for players 1 and 2\n        for x in range(0, 7):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "game = Game()\n# Font used to display the score and other information\nfont = pygame.font.Font(\"freesansbold.ttf\", 40)\n# Creating and setting screen width and height, display caption\nWIDTH, HEIGHT = 1600, 900\nscreen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE)\nsurf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\n# Setting the clock object and fps\nclock = pygame.time.Clock()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "font = pygame.font.Font(\"freesansbold.ttf\", 40)\n# Creating and setting screen width and height, display caption\nWIDTH, HEIGHT = 1600, 900\nscreen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE)\nsurf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\n# Setting the clock object and fps\nclock = pygame.time.Clock()\nFPS = 60\nif __name__ == \"__main__\":",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE)\nsurf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\n# Setting the clock object and fps\nclock = pygame.time.Clock()\nFPS = 60\nif __name__ == \"__main__\":\n    game.main()\n    pygame.quit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "surf",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "surf = pygame.Surface((WIDTH,HEIGHT))\npygame.display.set_caption(\"Stickman\")\n# Setting the clock object and fps\nclock = pygame.time.Clock()\nFPS = 60\nif __name__ == \"__main__\":\n    game.main()\n    pygame.quit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "clock = pygame.time.Clock()\nFPS = 60\nif __name__ == \"__main__\":\n    game.main()\n    pygame.quit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FPS = 60\nif __name__ == \"__main__\":\n    game.main()\n    pygame.quit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "class Button:\n    def __init__(self, x, y, image):\n        self.image = image\n        self.rect = self.image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\n        self.clicked = False\n    def draw(self):\n        action = False\n        # get mouse position",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "class Player:\n    def __init__(self, x, y, index):\n        self.pindex = index\n        self.reset(x, y)\n    def update(self, game_over):\n        dx = 0\n        dy = 0\n        walk_cooldown = 5\n        if game_over == 0:\n            # get keypresses",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "class World:\n    def __init__(self, data):\n        self.tile_list = []\n        # load images\n        dirt_img = pygame.image.load(\"img/dirt.png\")\n        grass_img = pygame.image.load(\"img/grass.png\")\n        row_count = 0\n        for row in data:\n            col_count = 0\n            for tile in row:",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "class Enemy(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        self.image = pygame.image.load(\"img/blob.png\")\n        self.rect = self.image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\n        self.move_direction = 1\n        self.move_counter = 0\n    def update(self):",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "Lava",
        "kind": 6,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "class Lava(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        img = pygame.image.load(\"img/lava.png\")\n        self.image = pygame.transform.scale(img, (tile_size, tile_size // 2))\n        self.rect = self.image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\nclass Exit(pygame.sprite.Sprite):\n    def __init__(self, x, y):",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "Exit",
        "kind": 6,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "class Exit(pygame.sprite.Sprite):\n    def __init__(self, x, y):\n        pygame.sprite.Sprite.__init__(self)\n        img = pygame.image.load(\"img/exit.png\")\n        self.image = pygame.transform.scale(img, (tile_size, int(tile_size * 1.5)))\n        self.rect = self.image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\nplayer = Player(100, screen_height - 130, 1)\nplayer2 = Player(100, screen_height - 130, 1)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "reset_level",
        "kind": 2,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "def reset_level(level):\n    player.reset(100, screen_height - 130)\n    blob_group.empty()\n    lava_group.empty()\n    exit_group.empty()\n    # load in level data and create world\n    if path.exists(f\"level{level}_data\"):\n        pickle_in = open(f\"level{level}_data\", \"rb\")\n        world_data = pickle.load(pickle_in)\n    world = World(world_data)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "clock = pygame.time.Clock()\nfps = 60\nscreen_width = 1000\nscreen_height = 1000\nscreen = pygame.display.set_mode((screen_width, screen_height))\npygame.display.set_caption(\"Stickman\")\n# define game variables\ntile_size = 50\ngame_over = 0\nmain_menu = True",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "fps",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "fps = 60\nscreen_width = 1000\nscreen_height = 1000\nscreen = pygame.display.set_mode((screen_width, screen_height))\npygame.display.set_caption(\"Stickman\")\n# define game variables\ntile_size = 50\ngame_over = 0\nmain_menu = True\nlevel = 0",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "screen_width",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "screen_width = 1000\nscreen_height = 1000\nscreen = pygame.display.set_mode((screen_width, screen_height))\npygame.display.set_caption(\"Stickman\")\n# define game variables\ntile_size = 50\ngame_over = 0\nmain_menu = True\nlevel = 0\nmax_levels = 7",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "screen_height",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "screen_height = 1000\nscreen = pygame.display.set_mode((screen_width, screen_height))\npygame.display.set_caption(\"Stickman\")\n# define game variables\ntile_size = 50\ngame_over = 0\nmain_menu = True\nlevel = 0\nmax_levels = 7\n# load images",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "screen = pygame.display.set_mode((screen_width, screen_height))\npygame.display.set_caption(\"Stickman\")\n# define game variables\ntile_size = 50\ngame_over = 0\nmain_menu = True\nlevel = 0\nmax_levels = 7\n# load images\n# sun_img = pygame.image.load('img/sun.png')",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "tile_size",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "tile_size = 50\ngame_over = 0\nmain_menu = True\nlevel = 0\nmax_levels = 7\n# load images\n# sun_img = pygame.image.load('img/sun.png')\nbg_img = pygame.image.load(\"assets/background1.gif\")\nrestart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nstart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "game_over",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "game_over = 0\nmain_menu = True\nlevel = 0\nmax_levels = 7\n# load images\n# sun_img = pygame.image.load('img/sun.png')\nbg_img = pygame.image.load(\"assets/background1.gif\")\nrestart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nstart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nexit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "main_menu = True\nlevel = 0\nmax_levels = 7\n# load images\n# sun_img = pygame.image.load('img/sun.png')\nbg_img = pygame.image.load(\"assets/background1.gif\")\nrestart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nstart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nexit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\n# function to reset level",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "level = 0\nmax_levels = 7\n# load images\n# sun_img = pygame.image.load('img/sun.png')\nbg_img = pygame.image.load(\"assets/background1.gif\")\nrestart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nstart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nexit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\n# function to reset level\ndef reset_level(level):",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "max_levels",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "max_levels = 7\n# load images\n# sun_img = pygame.image.load('img/sun.png')\nbg_img = pygame.image.load(\"assets/background1.gif\")\nrestart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nstart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nexit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\n# function to reset level\ndef reset_level(level):\n    player.reset(100, screen_height - 130)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "bg_img",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "bg_img = pygame.image.load(\"assets/background1.gif\")\nrestart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nstart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nexit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\n# function to reset level\ndef reset_level(level):\n    player.reset(100, screen_height - 130)\n    blob_group.empty()\n    lava_group.empty()\n    exit_group.empty()",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "restart_img",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "restart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nstart_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nexit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\n# function to reset level\ndef reset_level(level):\n    player.reset(100, screen_height - 130)\n    blob_group.empty()\n    lava_group.empty()\n    exit_group.empty()\n    # load in level data and create world",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "start_img",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "start_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\nexit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\n# function to reset level\ndef reset_level(level):\n    player.reset(100, screen_height - 130)\n    blob_group.empty()\n    lava_group.empty()\n    exit_group.empty()\n    # load in level data and create world\n    if path.exists(f\"level{level}_data\"):",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "exit_img",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "exit_img = pygame.image.load(\"assets/30x10blueplatform.gif\")\n# function to reset level\ndef reset_level(level):\n    player.reset(100, screen_height - 130)\n    blob_group.empty()\n    lava_group.empty()\n    exit_group.empty()\n    # load in level data and create world\n    if path.exists(f\"level{level}_data\"):\n        pickle_in = open(f\"level{level}_data\", \"rb\")",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "player = Player(100, screen_height - 130, 1)\nplayer2 = Player(100, screen_height - 130, 1)\nblob_group = pygame.sprite.Group()\nlava_group = pygame.sprite.Group()\nexit_group = pygame.sprite.Group()\n# load in level data and create world\nif path.exists(f\"level{level}_data\"):\n    pickle_in = open(f\"level{level}_data\", \"rb\")\n    world_data = pickle.load(pickle_in)\nworld = World(world_data)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "player2",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "player2 = Player(100, screen_height - 130, 1)\nblob_group = pygame.sprite.Group()\nlava_group = pygame.sprite.Group()\nexit_group = pygame.sprite.Group()\n# load in level data and create world\nif path.exists(f\"level{level}_data\"):\n    pickle_in = open(f\"level{level}_data\", \"rb\")\n    world_data = pickle.load(pickle_in)\nworld = World(world_data)\n# create buttons",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "blob_group",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "blob_group = pygame.sprite.Group()\nlava_group = pygame.sprite.Group()\nexit_group = pygame.sprite.Group()\n# load in level data and create world\nif path.exists(f\"level{level}_data\"):\n    pickle_in = open(f\"level{level}_data\", \"rb\")\n    world_data = pickle.load(pickle_in)\nworld = World(world_data)\n# create buttons\nrestart_button = Button(screen_width // 2 - 50, screen_height // 2 + 100, restart_img)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "lava_group",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "lava_group = pygame.sprite.Group()\nexit_group = pygame.sprite.Group()\n# load in level data and create world\nif path.exists(f\"level{level}_data\"):\n    pickle_in = open(f\"level{level}_data\", \"rb\")\n    world_data = pickle.load(pickle_in)\nworld = World(world_data)\n# create buttons\nrestart_button = Button(screen_width // 2 - 50, screen_height // 2 + 100, restart_img)\nstart_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "exit_group",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "exit_group = pygame.sprite.Group()\n# load in level data and create world\nif path.exists(f\"level{level}_data\"):\n    pickle_in = open(f\"level{level}_data\", \"rb\")\n    world_data = pickle.load(pickle_in)\nworld = World(world_data)\n# create buttons\nrestart_button = Button(screen_width // 2 - 50, screen_height // 2 + 100, restart_img)\nstart_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)\nexit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "world = World(world_data)\n# create buttons\nrestart_button = Button(screen_width // 2 - 50, screen_height // 2 + 100, restart_img)\nstart_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)\nexit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)\nrun = True\nwhile run:\n    clock.tick(fps)\n    screen.blit(bg_img, (0, 0))\n    # screen.blit(sun_img, (100, 100))",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "restart_button",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "restart_button = Button(screen_width // 2 - 50, screen_height // 2 + 100, restart_img)\nstart_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)\nexit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)\nrun = True\nwhile run:\n    clock.tick(fps)\n    screen.blit(bg_img, (0, 0))\n    # screen.blit(sun_img, (100, 100))\n    if main_menu == True:\n        if exit_button.draw():",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "start_button",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "start_button = Button(screen_width // 2 - 350, screen_height // 2, start_img)\nexit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)\nrun = True\nwhile run:\n    clock.tick(fps)\n    screen.blit(bg_img, (0, 0))\n    # screen.blit(sun_img, (100, 100))\n    if main_menu == True:\n        if exit_button.draw():\n            run = False",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "exit_button",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "exit_button = Button(screen_width // 2 + 150, screen_height // 2, exit_img)\nrun = True\nwhile run:\n    clock.tick(fps)\n    screen.blit(bg_img, (0, 0))\n    # screen.blit(sun_img, (100, 100))\n    if main_menu == True:\n        if exit_button.draw():\n            run = False\n        if start_button.draw():",
        "detail": "menu",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 5,
        "importPath": "menu",
        "description": "menu",
        "peekOfCode": "run = True\nwhile run:\n    clock.tick(fps)\n    screen.blit(bg_img, (0, 0))\n    # screen.blit(sun_img, (100, 100))\n    if main_menu == True:\n        if exit_button.draw():\n            run = False\n        if start_button.draw():\n            main_menu = False",
        "detail": "menu",
        "documentation": {}
    }
]